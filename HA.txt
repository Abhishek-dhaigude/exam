library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
entity HA is
 Port ( A : in STD_LOGIC;
 B : in STD_LOGIC;
 s : out STD_LOGIC; -- Sum output
 c : out STD_LOGIC); -- Carry output
end HA;
architecture structural of HA is
 component XOR2 is
 port ( x, y: in std_logic;
 z: out std_logic);
 end component;
 component AND2 is
 port ( p, q: in std_logic;
 r: out std_logic);
 end component;
begin
 HA1: XOR2 port map(A, B, s); -- Connect XOR for sum
 HA2: AND2 port map(A, B, c); -- Connect AND for carry
end structural;
 XOR
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
entity XOR2 is
 Port ( x : in STD_LOGIC;
 y : in STD_LOGIC;
 z : out STD_LOGIC);
end XOR2;
architecture behavior of XOR2 is
begin
 z <= x XOR y; -- XOR logic
end behavior;
AND
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
entity AND2 is
 Port ( p : in STD_LOGIC;
 q : in STD_LOGIC;
 r : out STD_LOGIC);
end AND2;
architecture behavior of AND2 is
begin
 r <= p AND q; -- AND logic
end behavior;
TEST BENCH
LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
ENTITY HFTB1 IS
END HFTB1;
ARCHITECTURE behavior OF HFTB1 IS
Declaration for the Unit Under Test (UUT)
 COMPONENT HA
 PORT(
 A : IN std_logic;
 B : IN std_logic;
 s : OUT std_logic;
 c : OUT std_logic
 );
 END COMPONENT;
 --Inputs
 signal A : std_logic := '0';
 signal B : std_logic := '0';
--Outputs
 signal s : std_logic;
 signal c : std_logic;
BEGIN
 uut: HA PORT MAP (
 A => A,
 B => B,
 s => s,
 c => c
 );
 -- Stimulus process
 stim_proc: process
 begin
 -- hold reset state for 100 ns.
A<='0';
B<='1';
 wait for 100 ns;
 Assert s<='1' report"error in logic";
assert c<= '0' report "error in logic";
wait for 100 ns;
A<='1';
B<='1';
assert s<='0'; report "error in logic";
assert c<='1'; report "error in logic";
wait for 100 ns;
 end process;
END;
